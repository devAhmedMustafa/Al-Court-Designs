// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrdrMate.Data;

#nullable disable

namespace OrdrMate.Data.Migrations
{
    [DbContext(typeof(OrdrMateDbContext))]
    [Migration("20250522231804_TableOfRestaurantBranch")]
    partial class TableOfRestaurantBranch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrdrMate.Models.Branch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BranchManagerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Lantitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchManagerId");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("RestaurantId");

                    b.HasIndex("Lantitude", "Longitude", "RestaurantId")
                        .IsUnique();

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("OrdrMate.Models.BranchRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Lantitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("Lantitude", "Longitude", "RestaurantId")
                        .IsUnique();

                    b.ToTable("BranchRequest");
                });

            modelBuilder.Entity("OrdrMate.Models.Category", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RestaurantId")
                        .HasColumnType("text");

                    b.HasKey("Name", "RestaurantId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("Name", "RestaurantId")
                        .IsUnique();

                    b.ToTable("Category");
                });

            modelBuilder.Entity("OrdrMate.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PreperationTime")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("CategoryName", "RestaurantId");

                    b.HasIndex("Name", "CategoryName", "RestaurantId")
                        .IsUnique();

                    b.ToTable("Item");
                });

            modelBuilder.Entity("OrdrMate.Models.Manager", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("OrdrMate.Models.Restaurant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ManagerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("OrdrMate.Models.Table", b =>
                {
                    b.Property<int>("TableNumber")
                        .HasColumnType("integer");

                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.HasKey("TableNumber", "BranchId");

                    b.HasIndex("BranchId");

                    b.HasIndex("TableNumber", "BranchId")
                        .IsUnique();

                    b.ToTable("Table");
                });

            modelBuilder.Entity("OrdrMate.Models.Branch", b =>
                {
                    b.HasOne("OrdrMate.Models.Manager", "BranchManager")
                        .WithMany()
                        .HasForeignKey("BranchManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrdrMate.Models.Restaurant", "Restaurant")
                        .WithMany("Branches")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BranchManager");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrdrMate.Models.BranchRequest", b =>
                {
                    b.HasOne("OrdrMate.Models.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrdrMate.Models.Category", b =>
                {
                    b.HasOne("OrdrMate.Models.Restaurant", "Restaurant")
                        .WithMany("Categories")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrdrMate.Models.Item", b =>
                {
                    b.HasOne("OrdrMate.Models.Restaurant", "Restaurant")
                        .WithMany("Items")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrdrMate.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryName", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("OrdrMate.Models.Restaurant", b =>
                {
                    b.HasOne("OrdrMate.Models.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("OrdrMate.Models.Table", b =>
                {
                    b.HasOne("OrdrMate.Models.Branch", "Branch")
                        .WithMany("Tables")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("OrdrMate.Models.Branch", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("OrdrMate.Models.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OrdrMate.Models.Restaurant", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("Categories");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
